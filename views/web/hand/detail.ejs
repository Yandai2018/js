<!doctype html>
<html lang="en">
<head>
    <title>手印痕迹</title>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
    <meta name="format-detection" content="telephone=no"/>
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-touch-fullscreen" content="yes">
    <link rel="icon" type="image/x-icon" href="/public/favicon.ico">
    <link href="/public/css/reset.css" rel="stylesheet">
    <link href="/public/css/base.css" rel="stylesheet">
</head>
<body class="gray-bg">
<div class="wrapper  animated fadeInRight blog container">
    <div id="vue_flag">
        <h4 class="title">修改手印信息</h4>
        <table style="background-color:transparent;width: 800px; ">
            <tr class="tr" cellspacing="100">
                <td>序号</td>
                <td>
                    <input type="text"
                           style="background-color: #ccc;color: #000;"
                           v-model="ORDER_NO"
                           readonly disabled>
                </td>
            </tr>
            <tr class="white">
                <td>手印类型</td>
                <td>
                    <select v-model="TYPE">
                        <option v-for="(item,index) in TYPES" :value="item.id">{{item.name}}</option>
                    </select>
                </td>
                <td>指纹编码</td>
                <td>
                    <input id="PRINT_CODE" v-model="PRINT_CODE">
                </td>
            </tr>
            <tr class="tr">
                <td>物证名称</td>
                <td>
                    <input id="LEFT_POSITION" v-model="LEFT_POSITION">
                </td>
                <td>基本特征</td>
                <td>
                    <input id="COLLECTION_MODE" v-model="BASIC_FEATURE">
            </tr>
            <tr class="white">
                <td>遗留部位</td>
                <td>
                    <input id="COLLECTED_BY" v-model="COLLECTED_BY">
                </td>
                <td>提取方法</td>
                <td>
                    <select v-model="METHOD" >
                        <option v-for="(item,index) in METHODS" :value="item.id">{{item.name}}</option>
                    </select>
                </td>
            </tr>
            <tr class="tr">
                <td>提取人</td>
                <td>
                    <input id="COLLECTED_BY_NAME" v-model="COLLECTED_BY_NAME">
                </td>
                <td>提取日期</td>
                <td>
                    <input class="datainp"
                           id="COLLECTED_DATE" type="text"
                           onclick="SetDate(this,'yyyy-MM-dd hh:mm:ss')"
                           v-model="COLLECTED_DATE" placeholder="请选择" readonly>
                </td>
            </tr>
            <tr class="white">
                <td>可靠程度</td>
                <td>
                    <select v-model="CRIMINAL_FLAG">
                        <option value=""></option>
                        <option value="1">是</option>
                        <option value="2">疑似</option>
                    </select>
                </td>
                <td>利用情况</td>
                <td>
                    <select v-model="UTILIZATION">
                        <option v-for="(item,index) in UTILIZATION_TYPE" :value="item.id">{{item.name}}</option>
                    </select>
                </td>
            </tr>
        </table>
        <p style="color: #9dbfd8;font-size: 14px;margin-top: 20px;">图片信息</p>
                <div style="text-align: center;margin: 30px 0 20px 0;background: #fff;width: 100%;max-height:200px;">
                    <img :src="CONTENT" style="max-width: 100%;max-height: 100%;"/>
                </div>
        <div class="row">
            <button class="btn" @click="handleEdit" type="button">修改</button>
            <!--<button class="btn" @click="handleAdd" type="button">添加</button>-->
            <!--<button class="btn" type="button">取消</button>-->
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"></script>
<script src="/public/js/axios.min.js"></script>
<script src="/public/lib/laydate/date.js"></script>
<script src="/public/js/config.js"></script>
<script>
    window.onload = function () {
        new Vue({
            el: '#vue_flag',
            data: {
                ORDER_NO: '',
                TYPE: '', // 类型字段
                TYPES: [], // 类型字典
                METHODS: [], // 提取方法字典
                METHOD: '', // 提取方法字段
                UTILIZATION_TYPE: '', //  利用情况字典
                UTILIZATION: "", // 利用情况字段
                PRINT_CODE: '',
                LEFT_POSITION: '',
                BASIC_FEATURE: '',
                COLLECTED_BY: '',
                COLLECTED_BY_NAME: "",
                COLLECTED_DATE: "",
                CRIMINAL_FLAG: "",
                CONTENT: "",
                handleEditFlag: true
            },
            mounted () {
                this.init();
            },
            methods: {
                getQueryString : (pams, name) => {
                    const result = pams.match(new RegExp('[?&]' + name + '=([^&]+)', 'i'))
                    if (result && result.length > 1) {
                        return result[1]
                    }
                    return ''
                },
                init: async function () {
                    const id = this.getQueryString(window.location.search,'id')
                    const res = await axios.get(baseUrl + '/hand/getinfo?id=' + id);
                    const TYPES = await axios.get(baseUrl + '/dictionary?parent_key=SYHJLXDM');
                    const UTILIZATION_TYPE = await axios.get(baseUrl + '/dictionary?parent_key=LYQKDM');
                    const METHODS = await axios.get(baseUrl + '/dictionary?parent_key=ZWTQFFDM');

                    this.TYPES = TYPES.data.data;
                    this.METHODS = METHODS.data.data;
                    this.UTILIZATION_TYPE = UTILIZATION_TYPE.data.data;

                    const v1 = res.data.data.length > 0 && res.data.data[0];

                    this.ORDER_NO = v1.ID;
                    this.TYPE = v1.PRINT_TYPE;
                    this.METHOD = v1.COLLECTION_MODE;
                    this.PRINT_CODE = v1.PRINT_CODE;
                    this.LEFT_POSITION = v1.LEFT_POSITION;
                    this.BASIC_FEATURE = v1.localname;
                    this.COLLECTED_BY = v1.CREATE_USER_ID;
                    this.COLLECTED_BY_NAME = v1.COLLECTED_BY_NAME;
                    this.COLLECTED_DATE = this.formate_time(v1.COLLECTED_DATE);
                    this.CRIMINAL_FLAG = v1.CRIMINAL_FLAG;
                    this.UTILIZATION = v1.UTILIZATION;
                    this.CONTENT = "data:image/png;base64," + v1.CONTENT;
                },
                formate_time (val) {
                    if (!val) return;
                    const oDate = new Date(val);
                    const _year = oDate.getFullYear();
                    const _month = oDate.getMonth() + 1 < 10 ? '0' + (oDate.getMonth() + 1) : oDate.getMonth() + 1;
                    const _day = oDate.getDate() < 10 ? '0' + oDate.getDate() : oDate.getDate();
                    const _hours = oDate.getHours() < 10 ? '0' + oDate.getHours() : oDate.getHours();
                    const _minutes = oDate.getMinutes() < 10 ? '0' + oDate.getMinutes() : oDate.getMinutes();
                    const _seconds = oDate.getSeconds() < 10 ? '0' + oDate.getSeconds() : oDate.getSeconds();
                    return _year + '-' + _month + '-' + _day + ' ' + _hours + ':' + _minutes + ':' + _seconds;
                },
                handleEdit () {
                    const timeVal = document.querySelector('#COLLECTED_DATE').value;
                    this.COLLECTED_DATE = timeVal;
                    this.handleEditFlag && this.postInfo('update', this.ORDER_NO);
                },
                async handleAdd () {
                    const timeVal = document.querySelector('#COLLECTED_DATE').value;
                    this.COLLECTED_DATE = timeVal;
                    for (let i = 100; i < 110; i++) {
                        const v1 = await this.postInfo('add', i);
                    }
                },
                async postInfo (action, id) {
                    const data = {
                        ID: id,
                        SERIAL_NO: id,
                        PRINT_TYPE: this.TYPE,
                        PRINT_CODE: this.PRINT_CODE,
                        LEFT_POSITION: this.LEFT_POSITION,
                        localname: this.BASIC_FEATURE,
                        CREATE_USER_ID: this.COLLECTED_BY,
                        COLLECTION_MODE: this.METHOD,
                        COLLECTED_BY_NAME: this.COLLECTED_BY_NAME,
                        COLLECTED_DATE: this.COLLECTED_DATE,
                        CRIMINAL_FLAG: this.CRIMINAL_FLAG,
                        UTILIZATION: this.UTILIZATION,
                    };
                    const v1 = await axios.post(baseUrl + "/hand/" + action, data);
                    if (v1.data.msg === 'success') {
                        alert("更新成功success");
                        window.close();
                    }
                }
            }
        });
    };
</script>
</body>
</html>